// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package iface

import (
	"context"
	"iter"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache[K comparable, V any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache[K, V] {
	mock := &MockCache[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache[K comparable, V any] struct {
	mock.Mock
}

type MockCache_Expecter[K comparable, V any] struct {
	mock *mock.Mock
}

func (_m *MockCache[K, V]) EXPECT() *MockCache_Expecter[K, V] {
	return &MockCache_Expecter[K, V]{mock: &_m.Mock}
}

// Capacity provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Capacity() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capacity")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockCache_Capacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capacity'
type MockCache_Capacity_Call[K comparable, V any] struct {
	*mock.Call
}

// Capacity is a helper method to define mock.On call
func (_e *MockCache_Expecter[K, V]) Capacity() *MockCache_Capacity_Call[K, V] {
	return &MockCache_Capacity_Call[K, V]{Call: _e.mock.On("Capacity")}
}

func (_c *MockCache_Capacity_Call[K, V]) Run(run func()) *MockCache_Capacity_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Capacity_Call[K, V]) Return(n int) *MockCache_Capacity_Call[K, V] {
	_c.Call.Return(n)
	return _c
}

func (_c *MockCache_Capacity_Call[K, V]) RunAndReturn(run func() int) *MockCache_Capacity_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Delete(ctx context.Context, key K) bool {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, K) bool); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call[K comparable, V any] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
func (_e *MockCache_Expecter[K, V]) Delete(ctx interface{}, key interface{}) *MockCache_Delete_Call[K, V] {
	return &MockCache_Delete_Call[K, V]{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockCache_Delete_Call[K, V]) Run(run func(ctx context.Context, key K)) *MockCache_Delete_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 K
		if args[1] != nil {
			arg1 = args[1].(K)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Delete_Call[K, V]) Return(b bool) *MockCache_Delete_Call[K, V] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCache_Delete_Call[K, V]) RunAndReturn(run func(ctx context.Context, key K) bool) *MockCache_Delete_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Get(ctx context.Context, key K) (V, bool) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, K) (V, bool)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, K) V); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, K) bool); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call[K comparable, V any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
func (_e *MockCache_Expecter[K, V]) Get(ctx interface{}, key interface{}) *MockCache_Get_Call[K, V] {
	return &MockCache_Get_Call[K, V]{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockCache_Get_Call[K, V]) Run(run func(ctx context.Context, key K)) *MockCache_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 K
		if args[1] != nil {
			arg1 = args[1].(K)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call[K, V]) Return(v V, b bool) *MockCache_Get_Call[K, V] {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockCache_Get_Call[K, V]) RunAndReturn(run func(ctx context.Context, key K) (V, bool)) *MockCache_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetMultiIter provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) GetMultiIter(ctx context.Context, keys iter.Seq[K], hitCB func(K, V), missCB func(K)) {
	_mock.Called(ctx, keys, hitCB, missCB)
	return
}

// MockCache_GetMultiIter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiIter'
type MockCache_GetMultiIter_Call[K comparable, V any] struct {
	*mock.Call
}

// GetMultiIter is a helper method to define mock.On call
//   - ctx context.Context
//   - keys iter.Seq[K]
//   - hitCB func(K, V)
//   - missCB func(K)
func (_e *MockCache_Expecter[K, V]) GetMultiIter(ctx interface{}, keys interface{}, hitCB interface{}, missCB interface{}) *MockCache_GetMultiIter_Call[K, V] {
	return &MockCache_GetMultiIter_Call[K, V]{Call: _e.mock.On("GetMultiIter", ctx, keys, hitCB, missCB)}
}

func (_c *MockCache_GetMultiIter_Call[K, V]) Run(run func(ctx context.Context, keys iter.Seq[K], hitCB func(K, V), missCB func(K))) *MockCache_GetMultiIter_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 iter.Seq[K]
		if args[1] != nil {
			arg1 = args[1].(iter.Seq[K])
		}
		var arg2 func(K, V)
		if args[2] != nil {
			arg2 = args[2].(func(K, V))
		}
		var arg3 func(K)
		if args[3] != nil {
			arg3 = args[3].(func(K))
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCache_GetMultiIter_Call[K, V]) Return() *MockCache_GetMultiIter_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_GetMultiIter_Call[K, V]) RunAndReturn(run func(ctx context.Context, keys iter.Seq[K], hitCB func(K, V), missCB func(K))) *MockCache_GetMultiIter_Call[K, V] {
	_c.Run(run)
	return _c
}

// Put provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Put(ctx context.Context, key K, value V) {
	_mock.Called(ctx, key, value)
	return
}

// MockCache_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockCache_Put_Call[K comparable, V any] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
//   - value V
func (_e *MockCache_Expecter[K, V]) Put(ctx interface{}, key interface{}, value interface{}) *MockCache_Put_Call[K, V] {
	return &MockCache_Put_Call[K, V]{Call: _e.mock.On("Put", ctx, key, value)}
}

func (_c *MockCache_Put_Call[K, V]) Run(run func(ctx context.Context, key K, value V)) *MockCache_Put_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 K
		if args[1] != nil {
			arg1 = args[1].(K)
		}
		var arg2 V
		if args[2] != nil {
			arg2 = args[2].(V)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Put_Call[K, V]) Return() *MockCache_Put_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Put_Call[K, V]) RunAndReturn(run func(ctx context.Context, key K, value V)) *MockCache_Put_Call[K, V] {
	_c.Run(run)
	return _c
}

// Reset provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Reset(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockCache_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockCache_Reset_Call[K comparable, V any] struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter[K, V]) Reset(ctx interface{}) *MockCache_Reset_Call[K, V] {
	return &MockCache_Reset_Call[K, V]{Call: _e.mock.On("Reset", ctx)}
}

func (_c *MockCache_Reset_Call[K, V]) Run(run func(ctx context.Context)) *MockCache_Reset_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_Reset_Call[K, V]) Return() *MockCache_Reset_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Reset_Call[K, V]) RunAndReturn(run func(ctx context.Context)) *MockCache_Reset_Call[K, V] {
	_c.Run(run)
	return _c
}

// Shutdown provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Shutdown(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockCache_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockCache_Shutdown_Call[K comparable, V any] struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter[K, V]) Shutdown(ctx interface{}) *MockCache_Shutdown_Call[K, V] {
	return &MockCache_Shutdown_Call[K, V]{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockCache_Shutdown_Call[K, V]) Run(run func(ctx context.Context)) *MockCache_Shutdown_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_Shutdown_Call[K, V]) Return() *MockCache_Shutdown_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Shutdown_Call[K, V]) RunAndReturn(run func(ctx context.Context)) *MockCache_Shutdown_Call[K, V] {
	_c.Run(run)
	return _c
}

// Size provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Size() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockCache_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockCache_Size_Call[K comparable, V any] struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockCache_Expecter[K, V]) Size() *MockCache_Size_Call[K, V] {
	return &MockCache_Size_Call[K, V]{Call: _e.mock.On("Size")}
}

func (_c *MockCache_Size_Call[K, V]) Run(run func()) *MockCache_Size_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Size_Call[K, V]) Return(n int) *MockCache_Size_Call[K, V] {
	_c.Call.Return(n)
	return _c
}

func (_c *MockCache_Size_Call[K, V]) RunAndReturn(run func() int) *MockCache_Size_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Traverse provides a mock function for the type MockCache
func (_mock *MockCache[K, V]) Traverse(ctx context.Context, fn func(context.Context, K, V) bool) {
	_mock.Called(ctx, fn)
	return
}

// MockCache_Traverse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Traverse'
type MockCache_Traverse_Call[K comparable, V any] struct {
	*mock.Call
}

// Traverse is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context, K, V) bool
func (_e *MockCache_Expecter[K, V]) Traverse(ctx interface{}, fn interface{}) *MockCache_Traverse_Call[K, V] {
	return &MockCache_Traverse_Call[K, V]{Call: _e.mock.On("Traverse", ctx, fn)}
}

func (_c *MockCache_Traverse_Call[K, V]) Run(run func(ctx context.Context, fn func(context.Context, K, V) bool)) *MockCache_Traverse_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(context.Context, K, V) bool
		if args[1] != nil {
			arg1 = args[1].(func(context.Context, K, V) bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Traverse_Call[K, V]) Return() *MockCache_Traverse_Call[K, V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Traverse_Call[K, V]) RunAndReturn(run func(ctx context.Context, fn func(context.Context, K, V) bool)) *MockCache_Traverse_Call[K, V] {
	_c.Run(run)
	return _c
}
